[1,0,0,[["cc.EffectAsset",["_name","shaders","techniques"],0]],[[0,0,1,2,4]],[[0,"../@libs/hyz/guide/effect/hollow",[{"hash":2351614431,"name":"../@libs/hyz/guide/effect/hollow|sprite-vs:vert|sprite-fs:frag","blocks":[{"name":"Constant","stageFlags":16,"binding":0,"members":[{"name":"holeShape","type":13,"count":1},{"name":"radius","type":13,"count":1},{"name":"roundCorner","type":13,"count":1},{"name":"opacity","type":13,"count":1},{"name":"center","type":14,"count":1},{"name":"rectSize","type":14,"count":1},{"name":"aspectRatio","type":13,"count":1}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":21,"location":1,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"Constant","stageFlags":16,"binding":0,"members":[{"name":"holeShape","type":13,"count":1},{"name":"radius","type":13,"count":1},{"name":"roundCorner","type":13,"count":1},{"name":"opacity","type":13,"count":1},{"name":"center","type":14,"count":1},{"name":"rectSize","type":14,"count":1},{"name":"aspectRatio","type":13,"count":1}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl3":{"vert":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nin vec3 a_position;\nin vec2 a_texCoord;\nout vec2 uv0;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  uv0 = a_texCoord;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nin vec2 uv0;\nlayout(std140) uniform Constant {\n  float holeShape;\n  float radius;\n  float roundCorner;\n  float opacity;\n  vec2 center;\n  vec2 rectSize;\n  float aspectRatio;\n};\nfloat sdCircle(in vec2 p, float radius) {\n  return length(p) - radius;\n}\nfloat sdHexagonRadius(in vec2 p, in float r, float cornerRadius) {\n  r -= cornerRadius;\n  const vec3 k = vec3(-0.866025404, 0.5, 0.577350269);\n  p = abs(p);\n  p -= 2.0 * min(dot(k.xy, p), 0.0) * k.xy;\n  p -= vec2(clamp(p.x, -k.z * r, k.z * r), r);\n  return length(p) * sign(p.y) - cornerRadius;\n}\nfloat sdBoxRadius(in vec2 p, in vec2 b, float cornerRadius) {\n  b -= vec2(cornerRadius);\n  vec2 d = abs(p) - b;\n  return length(max(d, 0.0)) + min(max(d.x, d.y), 0.0) - cornerRadius;\n}\nfloat computeAlpha(vec2 uv, vec2 center, float holeShape, float radius, float roundCorner, vec2 rectSize, float opacity, float aspectRatio) {\n  vec2 adjustedUV = vec2(uv.x, uv.y * aspectRatio);\n  vec2 adjustedCenter = vec2(center.x, center.y * aspectRatio);\n  float alpha = opacity;\n  if (abs(holeShape - 1.0) < 0.5) {\n    float d = sdCircle(adjustedUV - adjustedCenter, radius);\n    alpha *= smoothstep(-0.01, 0.01, d);\n  } else if (abs(holeShape - 2.0) < 0.5) {\n    vec2 size = vec2(radius / 1.414);\n    if (length(rectSize) > 0.01) {\n      size = rectSize * 0.5;\n    }\n    float d = sdBoxRadius(adjustedUV - adjustedCenter, size, roundCorner);\n    alpha *= smoothstep(-0.01, 0.01, d);\n  } else if (abs(holeShape - 3.0) < 0.5) {\n    float d = sdHexagonRadius(adjustedUV - adjustedCenter, radius / 1.732, roundCorner);\n    alpha *= smoothstep(-0.01, 0.01, d);\n  }\n  return alpha;\n}\nvec4 frag () {\n  vec4 col = vec4(0.0, 0.0, 0.0, 0.0);\n  col.a = computeAlpha(uv0, center, holeShape, radius, roundCorner, rectSize, opacity, aspectRatio);\n  return col;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nuniform highp mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec2 a_texCoord;\nvarying vec2 uv0;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  uv0 = a_texCoord;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvarying vec2 uv0;\n   uniform float holeShape;\n   uniform float radius;\n   uniform float roundCorner;\n   uniform float opacity;\n   uniform vec2 center;\n   uniform vec2 rectSize;\n   uniform float aspectRatio;\nfloat sdCircle(in vec2 p, float radius) {\n  return length(p) - radius;\n}\nfloat sdHexagonRadius(in vec2 p, in float r, float cornerRadius) {\n  r -= cornerRadius;\n  const vec3 k = vec3(-0.866025404, 0.5, 0.577350269);\n  p = abs(p);\n  p -= 2.0 * min(dot(k.xy, p), 0.0) * k.xy;\n  p -= vec2(clamp(p.x, -k.z * r, k.z * r), r);\n  return length(p) * sign(p.y) - cornerRadius;\n}\nfloat sdBoxRadius(in vec2 p, in vec2 b, float cornerRadius) {\n  b -= vec2(cornerRadius);\n  vec2 d = abs(p) - b;\n  return length(max(d, 0.0)) + min(max(d.x, d.y), 0.0) - cornerRadius;\n}\nfloat computeAlpha(vec2 uv, vec2 center, float holeShape, float radius, float roundCorner, vec2 rectSize, float opacity, float aspectRatio) {\n  vec2 adjustedUV = vec2(uv.x, uv.y * aspectRatio);\n  vec2 adjustedCenter = vec2(center.x, center.y * aspectRatio);\n  float alpha = opacity;\n  if (abs(holeShape - 1.0) < 0.5) {\n    float d = sdCircle(adjustedUV - adjustedCenter, radius);\n    alpha *= smoothstep(-0.01, 0.01, d);\n  } else if (abs(holeShape - 2.0) < 0.5) {\n    vec2 size = vec2(radius / 1.414);\n    if (length(rectSize) > 0.01) {\n      size = rectSize * 0.5;\n    }\n    float d = sdBoxRadius(adjustedUV - adjustedCenter, size, roundCorner);\n    alpha *= smoothstep(-0.01, 0.01, d);\n  } else if (abs(holeShape - 3.0) < 0.5) {\n    float d = sdHexagonRadius(adjustedUV - adjustedCenter, radius / 1.732, roundCorner);\n    alpha *= smoothstep(-0.01, 0.01, d);\n  }\n  return alpha;\n}\nvec4 frag () {\n  vec4 col = vec4(0.0, 0.0, 0.0, 0.0);\n  col.a = computeAlpha(uv0, center, holeShape, radius, roundCorner, rectSize, opacity, aspectRatio);\n  return col;\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":42,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":49}},"defines":[]}],[{"passes":[{"program":"../@libs/hyz/guide/effect/hollow|sprite-vs:vert|sprite-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"rasterizerState":{"cullMode":0},"depthStencilState":{"depthTest":false,"depthWrite":false},"properties":{"holeShape":{"type":13,"value":[1]},"radius":{"type":13,"value":[0]},"roundCorner":{"type":13,"value":[0]},"opacity":{"type":13,"value":[0.8]},"center":{"type":14,"value":[0.5,0.5]},"aspectRatio":{"type":13,"value":[1]},"rectSize":{"type":14,"value":[1,1]}}}]}]]],0,0,[],[],[]]
