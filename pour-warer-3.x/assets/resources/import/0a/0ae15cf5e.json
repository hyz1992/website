[1,["4dgfMhWBdGeInHxb86C0EE@f9941","8dZSNvOwFIq5mj4RzEcXLn@f9941","71LPSH7q1HFrySFlJ7jtRb","4dgfMhWBdGeInHxb86C0EE@6c48a","8dZSNvOwFIq5mj4RzEcXLn@6c48a"],["node","_spriteFrame","_textureSource","root","water","target","data","_normalSprite","effect"],["cc.SpriteFrame",["cc.Prefab",["_name"],2],["cc.Node",["_name","_layer","_children","_components","_prefab"],1,2,9,4],["cc.Node",["_name","_layer","_parent","_components","_prefab"],1,1,12,4],["cc.UITransform",["node","__prefab","_contentSize"],3,1,4,5],["cc.CompPrefabInfo",["fileId"],2],["cc.Sprite",["node","__prefab","_spriteFrame"],3,1,4,6],["c0a6d1qdSlPOLu8dOY8ZreG",["node","__prefab","water"],3,1,4,1],["cc.Button",["node","__prefab","clickEvents","_normalSprite"],3,1,4,9,6],["cc.ClickEvent",["_componentId","handler","target"],1,1],["cc.PrefabInfo",["fileId","instance","targetOverrides","nestedPrefabInstanceRoots","root","asset"],-1,1,1],["cc.Widget",["_alignFlags","_left","_right","_top","_originalWidth","node","__prefab"],-2,1,4],["1d866q6GeROiKW3fl629ZGB",["node","__prefab"],3,1,4],["cc.EffectAsset",["_name","shaders","techniques"],0]],[[5,0,2],[4,0,1,2,1],[6,0,1,2,1],[10,0,1,2,3,4,5,5],[1,0,2],[2,0,1,2,3,4,3],[3,0,1,2,3,4,3],[7,0,1,2,1],[8,0,1,2,3,1],[9,0,1,2,3],[11,0,1,2,3,4,5,6,6],[12,0,1,1],[13,0,1,2,4]],[[[[4,"cup"],[5,"cup",33554432,[-8],[[1,-2,[0,"89yEqvJQJJ/qOj33eKkydu"],[5,106,346]],[2,-3,[0,"bcij5fH8ROPp9LemHCGOZH"],1],[7,-5,[0,"dfSnXLADBMyp75PUcE2VKx"],-4],[8,-7,[0,"13ixL/CSFMYpXQp1B/xk8X"],[[9,"c0a6d1qdSlPOLu8dOY8ZreG","onBtn_click",-6]],2]],[3,"7bEZ7AeR9D6avgSsBwc6q2",null,null,null,-1,0]],[6,"img_cup",33554432,1,[[[1,-9,[0,"b0H5vzK51LX4yBD6nD1Ww5"],[5,76,330]],[2,-10,[0,"ebJlDpYYxHV7wrIepC9B6N"],0],-11,[10,9,15,15,8,76,-12,[0,"c3Fe3tQVNAXJCTCdC1Ttfj"]]],4,4,1,4],[3,"32t/m1Y6lGK7XQF6aq+nsb",null,null,null,1,0]],[11,2,[0,"373/J+GIhEwbaA0u8LP02s"]]],0,[0,3,1,0,0,1,0,0,1,0,4,3,0,0,1,0,5,1,0,0,1,0,-1,2,0,0,2,0,0,2,0,-3,3,0,0,2,0,6,1,12],[0,0,0,3],[1,1,7,8],[1,0,0,2]],[[{"name":"img_cup","rect":{"x":0,"y":0,"width":106,"height":346},"offset":{"x":0,"y":0},"originalSize":{"width":106,"height":346},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-53,-173,0,53,-173,0,-53,173,0,53,173,0],"indexes":[0,1,2,2,1,3],"uv":[0,346,106,346,0,0,106,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-53,"y":-173,"z":0},"maxPos":{"x":53,"y":173,"z":0}},"packable":false,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[2],[3]],[[[12,"../Effect/effect",[{"hash":178039655,"name":"../Effect/effect|sprite-vs:vert|sprite-fs:frag","blocks":[{"name":"Constant","stageFlags":16,"binding":0,"members":[{"name":"mainColor","type":16,"count":1}],"defines":[]},{"name":"Properties","stageFlags":16,"binding":1,"members":[{"name":"color0","type":16,"count":1},{"name":"color1","type":16,"count":1},{"name":"color2","type":16,"count":1},{"name":"color3","type":16,"count":1},{"name":"color4","type":16,"count":1},{"name":"color5","type":16,"count":1},{"name":"height0","type":13,"count":1},{"name":"height1","type":13,"count":1},{"name":"height2","type":13,"count":1},{"name":"height3","type":13,"count":1},{"name":"height4","type":13,"count":1},{"name":"height5","type":13,"count":1},{"name":"skewAngle","type":13,"count":1},{"name":"waveType","type":13,"count":1},{"name":"layerNum","type":5,"count":1},{"name":"sizeRatio","type":13,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":2,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":21,"location":1,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"Constant","stageFlags":16,"binding":0,"members":[{"name":"mainColor","type":16,"count":1}],"defines":[]},{"name":"Properties","stageFlags":16,"binding":1,"members":[{"name":"color0","type":16,"count":1},{"name":"color1","type":16,"count":1},{"name":"color2","type":16,"count":1},{"name":"color3","type":16,"count":1},{"name":"color4","type":16,"count":1},{"name":"color5","type":16,"count":1},{"name":"height0","type":13,"count":1},{"name":"height1","type":13,"count":1},{"name":"height2","type":13,"count":1},{"name":"height3","type":13,"count":1},{"name":"height4","type":13,"count":1},{"name":"height5","type":13,"count":1},{"name":"skewAngle","type":13,"count":1},{"name":"waveType","type":13,"count":1},{"name":"layerNum","type":5,"count":1},{"name":"sizeRatio","type":13,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":2,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl3":{"vert":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nin vec3 a_position;\nin vec2 a_texCoord;\nout vec2 v_uv;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv = a_texCoord;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nin vec2 v_uv;\nuniform sampler2D mainTexture;\nlayout(std140) uniform Constant {\n  vec4 mainColor;\n};\n#define M_PI 3.14159265358979323846\n#define MAX_ARR_LEN 6\nlayout(std140) uniform Properties {\n  vec4 color0;\n  vec4 color1;\n  vec4 color2;\n  vec4 color3;\n  vec4 color4;\n  vec4 color5;\n  float height0;\n  float height1;\n  float height2;\n  float height3;\n  float height4;\n  float height5;\n  float skewAngle;\n  float waveType;\n  int layerNum;\n  float sizeRatio;\n};\nvec2 tranPt(vec2 uv,float angle,vec2 center){\n  float c = cos(angle);\n  float s = sin(angle);\n  float Ox = center.x;\n  float Oy = center.y;\n  mat3 m = mat3(\n        c,0.0-s,(1.0-c)*Ox+s*Oy,\n        s,c,(1.0-c)*Oy-s*Ox,\n        0.0,0.0,1.0\n  );\n  vec3 ret = m*vec3(uv.x,uv.y,0.0);\n  return ret.xy;\n}\nvec2 getCenter(float angle,float _height){\n  float ratio = sizeRatio;\n  bool toLeft = sin(angle)>=0.0;\n  vec2 center = vec2(0.5,1.0-_height);\n  float _t = abs(tan(angle));\n  if(_height<0.5){\n    bool is_bottom = _t/ratio>2.0*_height;\n    if(is_bottom){\n      center.x = sqrt(2.0*_height/_t*ratio)/2.0;\n      center.y = 1.0 - sqrt(2.0*_height*_t/ratio)/2.0;\n      bool is_top = _t>(ratio)/(_height*2.0);\n      if(is_top){\n        center.y = 0.5;\n        center.x = _height;\n      }\n    }\n    if(!toLeft){\n      center.x = 1.0-center.x;\n    }\n  }else{\n    bool is_top = _t>2.0*ratio*(1.0-_height);\n    if(is_top){\n      center.x = sqrt(2.0*ratio*(1.0-_height)/_t)/2.0;\n      center.y = sqrt(2.0*ratio*(1.0-_height)*_t)/2.0/ratio;\n      bool is_bottom = _t>ratio/(2.0*(1.0-_height));\n      if(is_bottom){\n        center.y = 0.5;\n        center.x = 1.0-_height;\n      }\n    }\n    if(toLeft){\n      center.x = 1.0-center.x;\n    }\n  }\n  return center;\n}\nfloat drawWater(vec2 uv,float angle,float _height,int arrSize,int curIdx)\n{\n  float ratio = sizeRatio;\n  bool toLeft = sin(angle)>=0.0;\n  vec2 center = getCenter(angle,_height);\n  uv.y = uv.y*ratio;\n  uv -= vec2(center.x,center.y*ratio);\n  vec2 uv1 = tranPt(uv,angle,vec2(0.0));\n  float y = 0.0;\n  bool hasWave = curIdx==arrSize-1;\n  hasWave = hasWave;\n  if(hasWave){\n    float amplitude = 0.0;\n    float angularVelocity = 0.0;\n    float frequency = 0.0;\n    if(abs(waveType-1.0)<0.01){\n      amplitude = 0.06;\n      angularVelocity = 10.0;\n      frequency = 10.0;\n    }else if(abs(waveType-2.0)<0.01){\n      amplitude = 0.03;\n      angularVelocity = 5.0;\n      frequency = 6.0;\n    }\n    y = amplitude * sin((angularVelocity * uv1.x) + (frequency * cc_time.x)*(toLeft ? 1. : -1.));\n  }\n  float alpha = (uv1.y > y) ? 1.0 : 0.0;\n  return alpha;\n}\nvec4 frag () {\n  vec4 ret = vec4(1.0,1.0,1.0,1.0);\n  ret *= texture(mainTexture, v_uv);\n  if(ret.a == 0.0){\n    discard;\n  }\n  float angle = skewAngle;\n  vec2 uv = vec2(v_uv);\n  float a = 0.0;\n  float _height = 0.0;\n  vec4 colors[6];\n  float heights[6];\n  colors[0] = color0; colors[1] = color1; colors[2] = color2; colors[3] = color3; colors[4] = color4; colors[5] = color5;\n  heights[0] = height0; heights[1] = height1; heights[2] = height2; heights[3] = height3; heights[4] = height4; heights[5] = height5;\n  int size = 0;\n  for(int i=0;i<MAX_ARR_LEN;i++){\n    if(heights[i]<0.001){\n      continue;\n    }\n    size++;\n  }\n  for(int i=0;i<MAX_ARR_LEN;i++){\n    if(heights[i]<0.001){\n      continue;\n    }\n    _height+=heights[i];\n    a += drawWater(uv,angle,_height,size,i);\n    if(a>0.0){\n        ret *= a*colors[i];\n        break;\n    }\n  }\n  if(a<0.001){\n    discard;\n  }\n  return ret;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nuniform highp mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec2 a_texCoord;\nvarying vec2 v_uv;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv = a_texCoord;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nuniform highp vec4 cc_time;\nvarying vec2 v_uv;\nuniform sampler2D mainTexture;\n#define M_PI 3.14159265358979323846\n#define MAX_ARR_LEN 6\n   uniform vec4 color0;\n   uniform vec4 color1;\n   uniform vec4 color2;\n   uniform vec4 color3;\n   uniform vec4 color4;\n   uniform vec4 color5;\n   uniform float height0;\n   uniform float height1;\n   uniform float height2;\n   uniform float height3;\n   uniform float height4;\n   uniform float height5;\n   uniform float skewAngle;\n   uniform float waveType;\n   uniform float sizeRatio;\nvec2 tranPt(vec2 uv,float angle,vec2 center){\n  float c = cos(angle);\n  float s = sin(angle);\n  float Ox = center.x;\n  float Oy = center.y;\n  mat3 m = mat3(\n        c,0.0-s,(1.0-c)*Ox+s*Oy,\n        s,c,(1.0-c)*Oy-s*Ox,\n        0.0,0.0,1.0\n  );\n  vec3 ret = m*vec3(uv.x,uv.y,0.0);\n  return ret.xy;\n}\nvec2 getCenter(float angle,float _height){\n  float ratio = sizeRatio;\n  bool toLeft = sin(angle)>=0.0;\n  vec2 center = vec2(0.5,1.0-_height);\n  float _t = abs(tan(angle));\n  if(_height<0.5){\n    bool is_bottom = _t/ratio>2.0*_height;\n    if(is_bottom){\n      center.x = sqrt(2.0*_height/_t*ratio)/2.0;\n      center.y = 1.0 - sqrt(2.0*_height*_t/ratio)/2.0;\n      bool is_top = _t>(ratio)/(_height*2.0);\n      if(is_top){\n        center.y = 0.5;\n        center.x = _height;\n      }\n    }\n    if(!toLeft){\n      center.x = 1.0-center.x;\n    }\n  }else{\n    bool is_top = _t>2.0*ratio*(1.0-_height);\n    if(is_top){\n      center.x = sqrt(2.0*ratio*(1.0-_height)/_t)/2.0;\n      center.y = sqrt(2.0*ratio*(1.0-_height)*_t)/2.0/ratio;\n      bool is_bottom = _t>ratio/(2.0*(1.0-_height));\n      if(is_bottom){\n        center.y = 0.5;\n        center.x = 1.0-_height;\n      }\n    }\n    if(toLeft){\n      center.x = 1.0-center.x;\n    }\n  }\n  return center;\n}\nfloat drawWater(vec2 uv,float angle,float _height,int arrSize,int curIdx)\n{\n  float ratio = sizeRatio;\n  bool toLeft = sin(angle)>=0.0;\n  vec2 center = getCenter(angle,_height);\n  uv.y = uv.y*ratio;\n  uv -= vec2(center.x,center.y*ratio);\n  vec2 uv1 = tranPt(uv,angle,vec2(0.0));\n  float y = 0.0;\n  bool hasWave = curIdx==arrSize-1;\n  hasWave = hasWave;\n  if(hasWave){\n    float amplitude = 0.0;\n    float angularVelocity = 0.0;\n    float frequency = 0.0;\n    if(abs(waveType-1.0)<0.01){\n      amplitude = 0.06;\n      angularVelocity = 10.0;\n      frequency = 10.0;\n    }else if(abs(waveType-2.0)<0.01){\n      amplitude = 0.03;\n      angularVelocity = 5.0;\n      frequency = 6.0;\n    }\n    y = amplitude * sin((angularVelocity * uv1.x) + (frequency * cc_time.x)*(toLeft ? 1. : -1.));\n  }\n  float alpha = (uv1.y > y) ? 1.0 : 0.0;\n  return alpha;\n}\nvec4 frag () {\n  vec4 ret = vec4(1.0,1.0,1.0,1.0);\n  ret *= texture2D(mainTexture, v_uv);\n  if(ret.a == 0.0){\n    discard;\n  }\n  float angle = skewAngle;\n  vec2 uv = vec2(v_uv);\n  float a = 0.0;\n  float _height = 0.0;\n  vec4 colors[6];\n  float heights[6];\n  colors[0] = color0; colors[1] = color1; colors[2] = color2; colors[3] = color3; colors[4] = color4; colors[5] = color5;\n  heights[0] = height0; heights[1] = height1; heights[2] = height2; heights[3] = height3; heights[4] = height4; heights[5] = height5;\n  int size = 0;\n  for(int i=0;i<MAX_ARR_LEN;i++){\n    if(heights[i]<0.001){\n      continue;\n    }\n    size++;\n  }\n  for(int i=0;i<MAX_ARR_LEN;i++){\n    if(heights[i]<0.001){\n      continue;\n    }\n    _height+=heights[i];\n    a += drawWater(uv,angle,_height,size,i);\n    if(a>0.0){\n        ret *= a*colors[i];\n        break;\n    }\n  }\n  if(a<0.001){\n    discard;\n  }\n  return ret;\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":42,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":59}},"defines":[]}],[{"passes":[{"program":"../Effect/effect|sprite-vs:vert|sprite-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"rasterizerState":{"cullMode":0},"depthStencilState":{"depthTest":false,"depthWrite":false},"properties":{"mainTexture":{"value":"white","type":28},"mainColor":{"type":16,"value":[1,1,1,1]},"color0":{"type":16,"value":[1,1,1,1]},"color1":{"type":16,"value":[1,1,1,1]},"color2":{"type":16,"value":[1,1,1,1]},"color3":{"type":16,"value":[1,1,1,1]},"color4":{"type":16,"value":[1,1,1,1]},"color5":{"type":16,"value":[1,1,1,1]},"height0":{"type":13,"value":[0]},"height1":{"type":13,"value":[0]},"height2":{"type":13,"value":[0]},"height3":{"type":13,"value":[0]},"height4":{"type":13,"value":[0]},"height5":{"type":13,"value":[0]},"layerNum":{"type":5,"value":[4]},"skewAngle":{"type":13,"value":[0]},"sizeRatio":{"type":13,"value":[4.34]},"waveType":{"type":13,"value":[0]}}}]}]]],0,0,[],[],[]],[[{"name":"img_cupMask","rect":{"x":0,"y":0,"width":76,"height":330},"offset":{"x":0,"y":0},"originalSize":{"width":76,"height":330},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-38,-165,0,38,-165,0,-38,165,0,38,165,0],"indexes":[0,1,2,2,1,3],"uv":[0,330,76,330,0,0,76,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-38,"y":-165,"z":0},"maxPos":{"x":38,"y":165,"z":0}},"packable":false,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[2],[4]]]]
